#include <cstdio>
#include <cstring>

using namespace std;

const int maxn = 100010;
const int maxm = 100010;

int P[maxm];
char A[maxn], B[maxm];

/**P[1]:=0;
j:=0;
for i:=2 to m do
begin
   while (j>0) and (B[j+1]<>B[i]) do j:=P[j];
   if B[j+1]=B[i] then j:=j+1;
   P[i]:=j;
end;*/

void preprocess(char* B, int* P)
{
    P[0] = 0;
    int j = 0;
    int m = strlen(B);
    for (int i = 1; i < m; i++)
    {
        while (j && B[j] != B[i])
            j = P[j];

        if (B[j] == B[i])
            j++;

        P[i] = j;
    }
}

/**j:=0;
for i:=1 to n do
begin
   while (j>0) and (B[j+1]<>A[i]) do j:=P[j];
   if B[j+1]=A[i] then j:=j+1;
   if j=m then
   begin
      writeln('Pattern occurs with shift ',i-m);
      j:=P[j];
   end;
end;*/

int kmp(char* A, char* B, int* P)
{
    int j = 0;
    int n = strlen(A);
    int m = strlen(B);
    for (int i = 0; i < n; i++)
    {
        while (j && B[j] != A[i])
            j = P[j];

        if (B[j] == A[i])
            j++;
        if (j == m)
            return i - m;
    }
    return -1;
}

void printa(int* ptr, int offset)
{
    for (int i = 0; i < offset; i++)
        printf("%d", *(ptr + i));
    putchar('\n');
}

int main()
{
    strcpy(B, "abcdabcdabcd");
    preprocess(B, P);

    printa(P, strlen(B));
    //printf("%d\n", kmp(A, B, P));


    return 0;
}
